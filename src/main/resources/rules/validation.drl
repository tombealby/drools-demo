package rules;

import com.example.demo.model.*;
import com.example.demo.service.*;
import com.example.demo.report.*;

global ValidationReport validationReport;
global ReportFactory reportFactory;
global BankingInquiryService inquiryService;

import function com.example.demo.service.ValidationHelper.error;
import function com.example.demo.service.ValidationHelper.warning;
import function com.example.demo.service.ValidationHelper.yearsPassedSince;

dialect "mvel"

    rule "addressRequired"
       when
          Customer( address == null )
       then
          warning(kcontext);
    end
    rule "phoneNumberRequired"
       when
          Customer( phoneNumber == null || == "" )
       then
          error(kcontext);
    end
    rule "accountOwnerRequired"
      when
         $account : Account( owner == null )
      then
         error(kcontext, $account);
    end
    rule "accountBalanceAtLeast"
       when
          Customer ( accounts$ : accounts  )
       	  $account : Account( balance < 100 ) from accounts$
       then
          warning(kcontext, $account);
    end
    rule "studentAccountCustomerAgeLessThan"
       when
          $customer : Customer( eval (yearsPassedSince(dateOfBirth) >= 27) )
          $account : Account( type == Account.Type.STUDENT ) from $customer.accounts
       then
          error(kcontext, $customer);
    end
